import logging
import json
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    ChatJoinRequestHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ===== –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è =====
ADMIN_IDS = [1833581388, 7082906684]
TOKEN = "7733594700:AAGozxfK0w-tKRxGm5_sd_cpvF7QJ_xTDIs"
CLIENTS_FILE = "clients.json"
TEXT_FILE = "text.json"

# –°—Ç–∞–Ω–∏ –¥–ª—è /edittext
EDIT_INIT_Q, EDIT_CONF_BTN, EDIT_MSG, EDIT_BUTTON, EDIT_CONFIRM = range(5)
# –°—Ç–∞–Ω–∏ –¥–ª—è /broadcast
BCAST_MSG, BCAST_BUTTON, BCAST_CONFIRM = range(5, 8)

# ===== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ =====
def init_files():
    if not os.path.isfile(CLIENTS_FILE):
        with open(CLIENTS_FILE, "w", encoding="utf-8") as f:
            json.dump({"clients": []}, f, ensure_ascii=False, indent=4)
    if not os.path.isfile(TEXT_FILE):
        with open(TEXT_FILE, "w", encoding="utf-8") as f:
            json.dump({
                "initial_question": "–ë–∞–∂–∞—î—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–∞–Ω–∞–ª—É?",
                "confirm_button": "–¢–∞–∫",
                "message": "üëã –í—ñ—Ç–∞—î–º–æ! –û—Å—å –≤–∞—à—ñ –æ–ø—Ü—ñ—ó:",
                "buttons": []
            }, f, ensure_ascii=False, indent=4)

# ===== JSON —É—Ç–∏–ª—ñ—Ç–∏ =====
def load_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ===== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ =====
def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id not in ADMIN_IDS:
            if update.message:
                await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            elif update.callback_query:
                await update.callback_query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.", show_alert=True)
            return ConversationHandler.END
        return await func(update, context, *args, **kwargs)
    return wrapper

# ===== –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è =====
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cfg = load_json(TEXT_FILE)
    question = cfg.get('initial_question', '')
    confirm = cfg.get('confirm_button', '')
    context.user_data['awaiting_join'] = True
    kb = ReplyKeyboardMarkup([[confirm]], one_time_keyboard=True, resize_keyboard=True)
    await context.bot.send_message(
        chat_id=update.chat_join_request.from_user.id,
        text=question,
        reply_markup=kb
    )

async def handle_interest_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_join'):
        return

    cfg = load_json(TEXT_FILE)
    choice = update.message.text.strip()
    if choice == cfg['confirm_button']:
        clients = load_json(CLIENTS_FILE)
        uid = update.effective_user.id
        if not any(c['user_id'] == uid for c in clients['clients']):
            clients['clients'].append({'user_id': uid, 'username': update.effective_user.username or ''})
            save_json(CLIENTS_FILE, clients)

    # –ø—ñ–¥–≥–æ—Ç—É—î–º–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = cfg['message']
    buttons = cfg.get('buttons', [])

    # –∑–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    markup = ReplyKeyboardRemove()

    # —è–∫—â–æ —î inline-–∫–Ω–æ–ø–∫–∏ ‚Äî –±—É–¥—É—î–º–æ InlineKeyboardMarkup
    if buttons:
        inline_kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton(b['text'], url=b['url'])] for b in buttons]
        )
        markup = inline_kb

    # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º reply_markup
    await update.message.reply_text(text, reply_markup=markup)

    context.user_data.pop('awaiting_join', None)

# ===== –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ =====
@admin_only
async def list_clients_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clients = load_json(CLIENTS_FILE)['clients']
    if not clients:
        return await update.message.reply_text("–ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î.")
    lines = [f"–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {len(clients)}"] + [c['username'] or str(c['user_id']) for c in clients]
    await update.message.reply_text("\n".join(lines))

@admin_only
async def get_text_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cfg = load_json(TEXT_FILE)
    lines = [
        f"initial_question: {cfg.get('initial_question','')}",
        f"confirm_button: {cfg.get('confirm_button','')}",
        f"message: {cfg.get('message','')}"
    ]
    btns = cfg.get('buttons', [])
    lines.append("Buttons:")
    if btns:
        lines += [f"{i+1}. {b['text']} ‚Üí {b['url']}" for i,b in enumerate(btns)]
    else:
        lines.append("(–Ω–µ–º–∞—î)")
    await update.message.reply_text("\n".join(lines))

# --- /edittext ---
@admin_only
async def edit_text_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è initial_question:\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ /cancel.")
    return EDIT_INIT_Q

async def edit_init_q(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_initial_question'] = update.message.text.strip()
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π confirm_button.")
    return EDIT_CONF_BTN

async def edit_conf_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_confirm_button'] = update.message.text.strip()
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π message.")
    return EDIT_MSG

async def edit_text_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_message'] = update.message.text.strip()
    context.user_data['new_buttons'] = []
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–≤–∞|https://url –∞–±–æ /done.")
    return EDIT_BUTTON

async def edit_text_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt.lower() == '/done':
        return await ask_edit_confirm(update, context)
    parts = txt.split('|', 1)
    if len(parts) == 2 and parts[1].startswith('http'):
        context.user_data['new_buttons'].append({'text': parts[0], 'url': parts[1]})
        await update.message.reply_text("–î–æ–¥–∞–Ω–æ. –î–∞–ª—ñ –∞–±–æ /done.")
    else:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
    return EDIT_BUTTON

async def ask_edit_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    lines = [
        f"initial_question: {data['new_initial_question']}",
        f"confirm_button: {data['new_confirm_button']}",
        f"message: {data['new_message']}"
    ]
    btns = data.get('new_buttons', [])
    lines.append("Buttons:")
    if btns:
        lines += [f"{i+1}. {b['text']}‚Üí{b['url']}" for i,b in enumerate(btns)]
    else:
        lines.append("(–Ω–µ–º–∞—î)")
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data='edit_yes'), InlineKeyboardButton("‚ùå –ù—ñ", callback_data='edit_no')]]
    )
    await update.message.reply_text("\n".join(lines), reply_markup=kb)
    return EDIT_CONFIRM

async def edit_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data == 'edit_yes':
        cfg = load_json(TEXT_FILE)
        cfg['initial_question'] = context.user_data['new_initial_question']
        cfg['confirm_button'] = context.user_data['new_confirm_button']
        cfg['message'] = context.user_data['new_message']
        cfg['buttons'] = context.user_data['new_buttons']
        save_json(TEXT_FILE, cfg)
        await q.edit_message_text("–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")
    else:
        await q.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùå")
    context.user_data.clear()
    return ConversationHandler.END

# --- /broadcast ---
@admin_only
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üó£ –†–æ–∑—Å–∏–ª–∫–∞: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ /cancel.")
    return BCAST_MSG

async def broadcast_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['bc_message'] = update.message.text.strip()
    context.user_data['bc_buttons'] = []
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–≤–∞|https://url –∞–±–æ /done.")
    return BCAST_BUTTON

async def broadcast_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt.lower() == '/done':
        return await ask_bcast_confirm(update, context)
    parts = txt.split('|', 1)
    if len(parts) == 2 and parts[1].startswith('http'):
        context.user_data['bc_buttons'].append({'text': parts[0], 'url': parts[1]})
        await update.message.reply_text("–î–æ–¥–∞–Ω–æ. –î–∞–ª—ñ –∞–±–æ /done.")
    else:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
    return BCAST_BUTTON

async def ask_bcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    lines = [f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É:\n{data['bc_message']}", "–ö–Ω–æ–ø–∫–∏:"]
    btns = data['bc_buttons']
    if btns:
        lines += [f"{i+1}. {b['text']}‚Üí{b['url']}" for i,b in enumerate(btns)]
    else:
        lines.append("(–Ω–µ–º–∞—î)")
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data='bcast_yes'), InlineKeyboardButton("‚ùå –ù—ñ", callback_data='bcast_no')]]
    )
    await update.message.reply_text("\n".join(lines), reply_markup=kb)
    return BCAST_CONFIRM

async def broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.from_user.id not in ADMIN_IDS:
        return ConversationHandler.END
    if q.data == 'bcast_yes':
        msg = context.user_data['bc_message']
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton(b['text'], url=b['url'])] for b in context.user_data['bc_buttons']]
        ) if context.user_data['bc_buttons'] else None
        for c in load_json(CLIENTS_FILE)['clients']:
            await context.bot.send_message(chat_id=c['user_id'], text=msg, reply_markup=kb)
        await q.edit_message_text("–†–æ–∑—Å–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    else:
        await q.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùå")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùå")
    context.user_data.clear()
    return ConversationHandler.END

# ===== Main =====
def main():
    init_files()
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    # Join flow
    app.add_handler(ChatJoinRequestHandler(handle_join_request))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_interest_response), group=1)

    # Edittext conv
    edit_conv = ConversationHandler(
        entry_points=[CommandHandler("edittext", edit_text_start)],
        states={
            EDIT_INIT_Q:    [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_init_q)],
            EDIT_CONF_BTN:  [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_conf_btn)],
            EDIT_MSG:       [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_text_msg)],
            EDIT_BUTTON:    [CommandHandler("done", ask_edit_confirm), MessageHandler(filters.TEXT & ~filters.COMMAND, edit_text_button)],
            EDIT_CONFIRM:   [CallbackQueryHandler(edit_confirm, pattern='^edit_')],
        },
        fallbacks=[CommandHandler("cancel", cancel)], allow_reentry=True
    )
    app.add_handler(edit_conv)

    # Broadcast conv
    bcast_conv = ConversationHandler(
        entry_points=[CommandHandler("broadcast", broadcast_start)],
        states={
            BCAST_MSG:      [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_msg)],
            BCAST_BUTTON:   [CommandHandler("done", ask_bcast_confirm), MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_button)],
            BCAST_CONFIRM:  [CallbackQueryHandler(broadcast_confirm, pattern='^bcast_')],
        },
        fallbacks=[CommandHandler("cancel", cancel)], allow_reentry=True
    )
    app.add_handler(bcast_conv)

    # Admin commands
    app.add_handler(CommandHandler("clients", list_clients_command))
    app.add_handler(CommandHandler("gettext", get_text_command))

    app.run_polling()

if __name__ == "__main__":
    main()